"use strict";
const botConfig = {
    apikey: "<your api key>",
    botname: "<your bot name>",
};
const otpConfig = {
    customMsg: botConfig.botname + " : Hello, your otp is %code%",
    otpkey: "<your otp key obtained from ent-apis>"
};
const config = Object.assign({}, otpConfig, botConfig);

let $otp;

const main = module.exports.main = {};

main['userotp'] = (options, event, context, callback) => {
    "use strict";
    let _number = event.message;
    console.log(`Number => ${_number}`);
    if (!$otp) {
        $otp = new (require('gupshup-otp'))(config, function () {
            sendOtp(_number,options, event, context, callback);
        });
    } else {
        sendOtp(_number,options, event, context, callback);
    }
};
let sendOtp = (_number,options, event, context, callback)=>{
    $otp.sendOtp(_number, function (resp) {
        console.log('sent otp');
        console.log(resp)
        context.simpledb.roomleveldata.phone = {number: _number, verified: false, lastUpdated: new Date().getTime()};
        context.simpledb.saveData(function () {
            options.data.send_otp_response = resp.response;
            options.next_state = "userOtpInsert";
            callback(options, event, context);
        });
    });
}
let verifyOtp = (code,options, event, context, callback)=>{
    $otp.verifyOtp({
        phone: context.simpledb.roomleveldata.phone.number,
        code: code
    }, function (resp) {
        context.console.log("Response from " + resp);
        if (resp.status === "success"){
            context.simpledb.roomleveldata.phone.verified = true;
            options.next_state = "valid";
            options.data.valid_msg = resp.response;
        }else{
            context.simpledb.roomleveldata.phone.verified = false;
            context.simpledb.roomleveldata.phone.otpRetries=++context.simpledb.roomleveldata.phone.otpRetries||0;
            if(context.simpledb.roomleveldata.phone.otpRetries <=5){
                options.next_state = "invalid";
                options.data.invalid_msg = resp.response;
            }else{
                options.next_state = "unsuccessful";
                options.data.msg = "Sorry maximum number of retries exceeded. Kindly try after some time.";
            }
        }
        context.simpledb.roomleveldata.phone.lastUpdated = new Date().getTime();
        context.simpledb.saveData(function () {
            callback(options, event, context);
        });
    });
}
main['enterotp'] = (options, event, context, callback) => {
    context.console.log(context.simpledb.roomleveldata.phone.number)
    let _code = event.message;
    console.log(`Code => ${_code}`);
    if (!$otp) {
        $otp = new (require('gupshup-otp'))(config, function () {
            verifyOtp(_code,options, event, context, callback);
        });
    } else {
        verifyOtp(_code,options, event, context, callback);
    }
}
