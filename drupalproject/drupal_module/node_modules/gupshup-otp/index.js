"use strict";
const conf = require('./lib/config.json');
let request = require('request'),
    botconfig,
    queryString = require('querystring');
try {
    botconfig = require(process.cwd() + '/config.json');
} catch (err) {
    console.log('No config found on project root.')
}
class GupshupOtpService {
    constructor(creds, callback) {
        if (!creds && !botconfig) {
            throw new Error("Creds are required. To start the module");
        }
        if (botconfig && botconfig.otpCreds) {
            creds = botconfig.otpCreds;
        }
        var req = ['otpkey', 'apikey'];
        req.map(function (x) {
            if (!creds.hasOwnProperty(x))throw new Error('"' + x + '" is required');
        });
        this.creds = creds;
        if (creds.otpKey) {
            this.createOTPKey(callback);
        } else {
            this.register(() => {
                this.createOTPKey(callback);
            })
        }
    }


    /**
     *Register with accountid and password.
     * @param cb : optional if callback is provided, the final creds obj will be returned to it.
     */
    register(cb) {
        console.log("trying to register");
        var form = {
            accountid: this.creds.accountid,
            token: this.creds.token
        };
        request({
            method: conf.services.register.method,
            uri: conf.services.register.url,
            headers: {apikey: this.creds.apikey},
            form: form,
        }, cb)
    }

    /**
     * Create OTP key for sending sms in future.
     * @param cb : optional if callback is provided, the final creds obj will be returned to it.
     */
    createOTPKey(cb) {
        console.log("Creating otp key");
        var form = {
            message: "Hi, here is your otp %code%. Kindly do not share this with anyone.",
            accountType: "india"
        };
        request({
            method: conf.services.createApiKey.method,
            uri: conf.services.createApiKey.url,
            headers: {apikey: this.creds.apikey},
            form: form,
        }, (err, httpResponse, body) => {
            if (err) return err;
            let otpResponse = JSON.parse(body);
            let creds = this.creds;
            creds.otpResponse = otpResponse;
            creds.otpKey = Object.keys(otpResponse)[0];
            if (creds.customMsg !== otpResponse[creds.otpKey].message) {
                this.createCustomOTPResponse(creds.customMsg, cb);
                return;
            }
            if (cb)
                cb(creds);
        })
    }

    createCustomOTPResponse(msg, callback) {
        console.log("Creating custom response key");
        var form = {
            message: msg,
            key: this.creds.otpKey
        };
        request({
            method: conf.services.updateMsg.method,
            uri: conf.services.updateMsg.url,
            headers: {apikey: this.creds.apikey},
            form: form,
        }, (err, httpResponse, body) => {
            if (err) return err;
            console.log(body);
            if (callback)
                callback(this.creds);
        })
    }

    /**
     * Send OTP to the phone number provided.
     * @param number
     * @param context
     * @param event
     */
    sendOtp(number, cb) {
        console.log("Send Otp to " + number);
        let form = {
            phone: number,
            key: this.creds.otpKey,
            format: 'json'
        };
        // sanitizer(form, conf.services.sendOtp.params,function(x){
        //     console.log(x);
        // })
        let options = {
            method: conf.services.sendOtp.method,
            uri: conf.services.sendOtp.url,
            headers: {apikey: this.creds.apikey},
            form: form
        }
        console.log(options);
        request(options, (err, res, body) => {
            if (err) cb(err);
            generateResponse(body, cb);
        })
    }

    /**
     * Send OTP to the phone number provided.
     * @param number
     * @param context
     * @param event
     */
    verifyOtp(data, cb) {
        console.log("Verifying Otp of " + data.phone);
        let form = {
            phone: data.phone,
            key: this.creds.otpKey,
            code: data.code,
            format: 'json'
        };
        let options = {
            method: conf.services.verifyOtp.method,
            uri: conf.services.verifyOtp.url,
            headers: {apikey: this.creds.apikey},
            form: form
        }
        console.log(options);
        request(options, (err, res, body) => {
            if (err) cb(err);
            generateResponse(body, cb)
        })
    }
}
/**
 * Generating custom response handler for enterprise sms services.
 * @param body
 * @param cb
 * @returns {*}
 */
function generateResponse(body, cb) {
    let resp, msg
    try {
        resp = JSON.parse(body)
        msg = conf.services.statusCode[resp.code];
        if (msg)
            resp = msg;
    } catch (err) {
        if (typeof body == "string") {
            body = body.split("|");
            msg = conf.services.statusCode[body[1].trim()];
            resp = (msg) ? msg : {"status": body[0].trim(), "msg": body[2].trim()};
        } else {
            console.log("Unable to parse : " + body);
            resp = {"status": "error", "msg": "Unable to parse : " + body};
        }
    } finally {
        if (resp)
            return cb(resp);
        else
            return cb(body);
    }
}
function sanitizer(obj1, comparison, cb) {
    Object.keys(obj1).map(function (x) {
        if (!comparison.hasOwnProperty(x)) {
            return cb("err", x + " is missing");
        }
    })
}
module.exports = GupshupOtpService;
